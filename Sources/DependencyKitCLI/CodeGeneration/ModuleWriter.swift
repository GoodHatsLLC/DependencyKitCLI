import Foundation

class ModuleWriter {

    private let moduleDeclarations: ModuleDeclarations

    init(moduleDeclarations: ModuleDeclarations) {
        self.moduleDeclarations = moduleDeclarations
    }

    private func codegenHeader() -> String {
        "// This file contains code autogenerated by DependencyKit.\n" +
        "// Do not modify.\n\n"
    }

    private func moduleImports() -> String {
        moduleDeclarations.imports.map(\.identifier)
            .sorted()
            .reduce("") { acc, curr in
                acc + "import \(curr)\n"
            }
    }

    private func requirementField(for field: FieldDefinition) -> String {
        let optional = field.optional ? "? " : " " // TODO: this is probably not robust
        let access = field.access.map { $0 + " " } ?? ""
        return
            access +
            "var " +
            field.identifier + ": " +
            field.type +
            optional +
            "{ injected." + field.identifier + " }"
    }

    private func resourceTypeRequirements(for requirement: Requirements) -> String {
        let sortedFields = requirement.fields.sorted {
            $0.identifier < $1.identifier
        }
        let access = requirement.access.map { $0 + " " } ?? ""
        return
            access +
            "extension \(FrameworkConstants.resourceProtocolIdentifier) " +
            "where \(FrameworkConstants.genericI): " +
            requirement.identifier + " {\n" +
            sortedFields.map(requirementField(for:)).reduce("") { acc, curr in
                acc + CodegenConstants.indent + curr + "\n"
            } +
            "}"
    }

    private func moduleRequirements() -> String {
        moduleDeclarations.requirements.sorted {
            $0.identifier < $1.identifier
        }.reduce("") { acc, curr in
            acc +
            "\n" +
            resourceTypeRequirements(for: curr) +
            "\n"
        }
    }

    func moduleCodegenFileContents() -> String {
        codegenHeader() +
        moduleImports() +
        moduleRequirements()
    }

}
